import math
from random import randint
import time
highScore = 0

#Most random words were generated by Chatgpt.
easyWords = ["acid", "bark", "cold", "dawn", "echo", "fizz", "gold", "hush", "iris", "jolt", "kite", "luck", "moon",
             "nest", "open", "pink", "quiz", "rock", "sand", "time", "urge", "vast", "warm", "yarn", "zest",
             "arch", "blue", "coin", "dust", "else", "fade", "glow", "hope", "idea", "jump", "kind", "lava", "mask",
             "note", "oval", "plum", "quip", "rays", "song", "true", "unit", "veil", "wish", "yard", "zero",
             "ally", "brim", "crux", "dove", "envy", "fire", "grim", "hail", "icy", "jazz", "kept", "leaf", "mild",
             "name", "omen", "perk", "quad", "ride", "swan", "tone", "undo", "vibe", "wood", "yoga", "zone",
             "apex", "bold", "chop", "dirt", "exit", "fast", "gush", "hard", "idle", "join", "knit", "limb", "much",
             "near", "only", "peer", "quiz", "risk", "star", "tune", "rare", "vote", "wave", "year","epic",
             "bone"]
mediumWords = ["able", "acid", "actor", "adopt", "after", "agent", "alert", "alike", "alive", "allow", "alone", "angel",
               "angry", "apple", "argue", "arise", "armed", "artist","aside", "asset", "audio", "avoid", "awake", "award",
               "aware", "basic", "bacon", "badge", "baker","beast", "begin", "birth", "blade", "blast", "block", "bloom",
               "board", "brain", "brave", "brief", "bring", "broad", "brush", "build", "burst", "camel", "candy","carry",
                "chain", "chair", "charm", "chart", "chase", "cheer","chest", "chief", "child", "choir", "claim", "clean",
                "clear", "clerk", "clock", "cloud", "coast","cobra", "color", "comic", "copper", "crazy", "cream", "crisp",
               "crown", "daily", "dance", "depth", "dairy", "delay", "dense", "diary", "dizzy", "dozen", "draft",
               "drama", "dream", "dress", "drink", "drive", "eager", "eagle","early", "earth", "mythic", "elder",
               "elect", "empty", "enemy", "enjoy", "entry", "equal", "error","event", "every", "exact", "ultra", "super"]

hardWords = ["absolute", "abstract", "academic", "baseball", "accepted", "bathroom", "accuracy", "birthday", "congress",
             "boundary", "achieved", "acquired", "consumer", "building", "contract", "addition", "business", "campaign",
             "convince", "capacity", "cashmere", "advisory", "advocate", "catching", "creation", "affected", "category",
             "creative", "criminal", "alliance", "cautious", "critical", "ceremony", "analysis", "currency", "champion",
             "chemical", "daughter", "circular", "daylight", "civilian", "deadline", "approach", "argument", "clothing",
             "collapse", "deferred", "assembly", "colorful", "athletic", "delivery", "commerce", "attitude", "designer",
             "attorney", "audience", "diabetes", "aviation", "diameter", "doubtful", "dramatic", "emphasis", "dressing",
             "dropping", "disabled", "engaging", "disclose", "discount", "enormous", "discover", "economic", "disorder",
             "entrance", "disposal", "distance", "equality", "equation", "district", "electric", "evaluate", "division",
             "eventual", "facility", "document", "everyone", "domestic", "evidence", "dominant", "festival", "floating",
             "football", "explicit", "firewall", "flexible", "extended", "generate", "fraction", "generous", "hardware",
             "grateful", "humanity", "identify", "increase", "informal", "informed", "interact", "involved", "keyboard",
             "internal", "function", "learning", "measured", "momentum", "magnetic", "military", "mounting", "meantime",
             "literary", "memorial", "mortgage", "minister", "monetary", "negative", "original", "progress", "preserve",
             "reliable", "purchase", "position", "receiver", "response", "scrutiny", "seasonal", "suitable", "specific",
             "striking", "sensible", "structure", "tactical", "training", "universe", "withdraw", "warranty",
             "wildlife", "uncommon", "legendary"]


def calc_wpm(length, time_taken):
    speed = ((length / 5) / time_taken)
    return round(speed, 2)


def generate_sentence(diff):
    length = 0
    used_list = 0
    sentence = []
    if diff == "e":
        length = 7
        used_list = easyWords
    elif diff == "m":
        length = 14
        used_list = mediumWords
    elif diff == "h":
        length = 14
        used_list = hardWords
    for i in range(0, length):
        sentence.append(used_list[randint(0, len(used_list) - 1)])
        if not i == length - 1:
            sentence.append(" ")
    return sentence


def custom_sentence(words, diff):
    sentence = []
    if diff == "Easy":
        used_list = easyWords
    elif diff == "Medium":
        used_list = mediumWords
    elif diff == "Hard":
        used_list = hardWords
    else:
        return False
    try:
        x = int(words)
    except ValueError:
        return False
    if x < 1:
        return False
    for i in range(0, x):
        sentence.append(used_list[randint(0, len(used_list) - 1)])
        if not i == x - 1:
            sentence.append(" ")
    return sentence


def check_accuracy(typed_sentence, sentence):
    word_pos = 0
    acc = 0
    char_count = 0
    for x in typed_sentence:
        char_pos = 0
        while len(typed_sentence) < len(sentence):
            typed_sentence.append("0")
        while len(typedSentence) > len(sentence):
            sentence.append("0")
        matching_word = sentence[word_pos]
        for char in x:
            while len(matching_word) > len(x):
                matching_word = matching_word[:-1]
            while len(matching_word) < len(x):
                matching_word = matching_word + "0"
            char_count = char_count + 1
            matching_char = matching_word[char_pos]
            if char == matching_char:
                acc += 1
            char_pos = char_pos + 1
        word_pos = word_pos + 1
    acc = round(acc / char_count, 2) * 100
    return acc, char_count


while True:
    difficulty = ""
    valid_input = False
    while not valid_input:
        print(f"Your high score is: {highScore} WPM")
        difficultyPrompt = input("Select Difficulty: Easy, Medium, Hard, Custom. Q to quit. C to clear high score. ")
        if difficultyPrompt == "Easy":
            valid_input = True
            difficulty = "e"
        if difficultyPrompt == "Medium":
            difficulty = "m"
            valid_input = True
        if difficultyPrompt == "Hard":
            difficulty = "h"
            valid_input = True
        if difficultyPrompt == "Q" or difficultyPrompt == "q":
            print(f"Your high score was: {highScore} WPM!")
            exit()
        if difficultyPrompt == "C" or difficultyPrompt == "c":
            print("Clearing high score...")
            highScore = 0
        if difficultyPrompt == "Custom":
            word_count = input("Number of words?")
            word_diff = input("Easy, Medium, or Hard words?")
            test = custom_sentence(word_count, word_diff)
            if test:
                valid_input = True
                difficulty = "c"
            else:
                valid_input = False
                print("Incorrect prompts.")
    if difficulty != "c":
        typedSentence = generate_sentence(difficulty)
    else:
        typedSentence = custom_sentence(word_count, word_diff)
    currentTime = time.time()
    print("Type this as fast as you can: ")
    for word in typedSentence:
        print(word, end="")
    print("")
    attempt = input("")
    if not attempt:
        continue
    splitAttempt = attempt.split()
    prompt = []

    for word in splitAttempt:
        prompt.append(word)
        prompt.append(" ")
    prompt.pop()
    finishedTime = time.time()
    accuracy, charCount = check_accuracy(typedSentence, prompt)
    print(f"Your accuracy was: {accuracy} %")

    if accuracy > 89.9:
        wpm = calc_wpm(charCount, (finishedTime - currentTime) / 60)
        print(f"Your Wpm is: {wpm}")
        if accuracy == 100:
            print("Perfect Accuracy!")
        if wpm > highScore:
            print("New High Score!")
            highScore = wpm
            with open("HighScore.py", "w") as file:
                file.write(str(wpm))
        if wpm > 100:
            z = math.floor(wpm/100)
            print(f"Over {z}00 Wpm!")
    else:
        print("Your accuracy was too low! Get at least 90% Accuracy.")
